@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями
 */
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
      Плавный скролл
   */
  scroll-behavior: smooth;
}

body {
  /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
      Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[fill] {
  fill: currentColor;
}

svg *[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-dark: #1B1911;
  --color-light: #F2EFE6;
  --color-accent: #DC3F06;
  --border-thin: 1px solid var(--color-accent);
  --border-wide: 2px solid var(--color-accent);
  --border-radius: 20px;
  --border-radius-small: 6px;
  --container-width: 1250px;
}

body {
  height: 100vh;
  background-image: url("../images/bg.png");
}

.header {
  height: 148px;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 33px;
}

.header_logo {
  display: inline-flex;
  align-content: center;
  gap: 10px;
}

.header_logo .light {
  font-family: var(--second-family);
  font-weight: 800;
  font-size: 65px;
  color: #f2efe6;
}

.header_logo .dark {
  font-family: var(--second-family);
  font-weight: 800;
  font-size: 65px;
  color: #1b1911;
}

.main_container {
  display: flex;
  border-radius: 20px;
  margin-left: 335px;
  margin-right: 335px;
  height: 700px;
  background: rgba(27, 25, 17, 0.7);
}

.todo-container {
  margin-left: 52px;
  margin-top: 20px;
}

.todo-container h2 {
  font-size: 2em;
  margin-bottom: 20px;
  color: #F2EFE6;
}

.input-container {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.input-container input {
  flex: 1;
  padding: 0 10px;
  border: 1px solid var(--color-accent); /* Изменено */
  border-radius: 6px; /* Изменено */
  outline: none;
  background: rgba(27, 25, 17, 0.2);
  color: #fff;
  font-size: 1em;
  width: 345px; /* Изменено */
  height: 30px; /* Изменено */
}

.input-container input::placeholder {
  color: rgba(242, 239, 230, 0.5);
}

.input-container .add-btn {
  background-color: var(--color-accent);
  border: none;
  color: var(--color-dark);
  font-size: 1.5em;
  padding: 10px;
  margin-right: 10px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 30px;
  width: 30px;
}

.task-list {
  list-style: none;
  padding: 0;
}

.task-list li {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.task-list input[type=checkbox] {
  display: none;
}

.task-list label {
  display: flex;
  align-items: center;
  cursor: pointer;
  color: #F2EFE6;
}

.task-list label::before {
  content: "";
  display: inline-block;
  width: 30px;
  height: 30px;
  border: 2px solid var(--color-accent);
  border-radius: 5px;
  margin-right: 10px;
  background: rgba(27, 25, 17, 0.2);
}

.task-list input[type=checkbox]:checked + label::before {
  background-color: var(--color-accent);
  background-image: url("../../icons/check.svg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 20px;
}

.task-list label.completed {
  text-decoration: line-through;
  color: #aaa;
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

/* Добавить стили для зачеркнутого текста, если checkbox отмечен */
.task-list input[type=checkbox]:checked + label {
  text-decoration: line-through;
}

/*# sourceMappingURL=styles.css.map */
